# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
 
trigger:
- main
 
pool:
  name: Azure Pipelines

# Set variables
variables:
  directory: $(System.DefaultWorkingDirectory)

stages:
- stage: running_git_commands
  displayName: Sync GitHub Repo to Backup
  jobs:
  - job: initiate
    displayName: initiate
    continueOnError: false
    steps:
    - checkout: self
      clean: true
      persistCredentials: true
      displayName: run_commands
    - bash: |
        git remote add myRemoteRepo https://$(System.AccessToken)@dev.azure.com/HTS-ADS/WA%20Verify/_git/DigitalCovid19VaccineRecord-UI.git
        git fetch myRemoteRepo main
- stage: dev_build
  displayName: Build Dev Solution
  jobs:  
  - job: Build
    displayName: Build and Publish Solution
    steps:
    - task: NodeTool@0
      displayName: 'Install node.js'
      inputs:
        versionSpec: '10.x'

    - script: 
        npm install
      displayName: 'npm install'
      workingDirectory: $(directory)
 
    - script: 
        set "REACT_APP_STAGE=$(stage)" && npm run build
      displayName: 'npm build'
      workingDirectory: $(directory)

    - task: CopyFiles@2
      displayName: 'Copy web.config to build folder'
      inputs:
        SourceFolder: '$(directory)/'
        Contents: 'web.config'
        TargetFolder: '$(directory)/build'

    - task: CopyFiles@2
      displayName: 'Copy maintenancepage.html to build folder'
      inputs:
        SourceFolder: '$(directory)/'
        Contents: 'maintenancepage.html'
        TargetFolder: '$(directory)/build'

    - task: PowerShell@2
      displayName: 'Replace config.js values for Development'
      inputs:
        targetType: 'inline'
        script: |
          $config_dest = "$(directory)\build\config.js"
          $content = "window.config = { CREDENTIALS_API_STATUS:'https://dev-waverify-api.doh.wa.gov', CREDENTIALS_API_QR:'https://dev-waverify-api.doh.wa.gov', CREDENTIALS_GA_DEPARTMENT: '', APPLICATION_INSIGHTS_INSTRUMENTATION_KEY: '0a94977e-279d-4407-8f57-864d08dd878e'};"
          echo $content | Set-Content $config_dest;
 
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: 'build'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs: 
        pathtoPublish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip

- stage: dev_deployment
  displayName: Deploy Development Solution
  dependsOn: [dev_build]
  jobs:
    - deployment: dev_deployment
      displayName: Deploy to Development Environment
      environment: Development
      strategy: 
        runOnce:
          deploy:
            steps:
            - task: DownloadBuildArtifacts@1
              displayName: 'Download Artifact'
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'drop'
                downloadPath: '$(System.ArtifactsDirectory)'
            - task: AzureRmWebAppDeployment@4
              displayName: 'Azure App Service Deployment'
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'sc-waverify-adopipelines'
                appType: 'webApp'
                WebAppName: 'app-waverify-ui-dev'
                packageForLinux: '$(System.ArtifactsDirectory)/**/*.zip'

- stage: qa_build
  displayName: Build QA Solution
  dependsOn: [dev_deployment]
  jobs:  
  - job: Build
    displayName: Build and Publish Solution
    steps:
    - task: NodeTool@0
      displayName: 'Install node.js'
      inputs:
        versionSpec: '10.x'

    - script: 
        npm install
      displayName: 'npm install'
      workingDirectory: $(directory)
 
    - script: 
        set "REACT_APP_STAGE=$(stage)" && npm run build
      displayName: 'npm build'
      workingDirectory: $(directory)

    - task: CopyFiles@2
      displayName: 'Copy web.config to build folder'
      inputs:
        SourceFolder: '$(directory)/'
        Contents: 'web.config'
        TargetFolder: '$(directory)/build'

    - task: PowerShell@2
      displayName: 'Replace config.js values for Development'
      inputs:
        targetType: 'inline'
        script: |
          $config_dest = "$(directory)\build\config.js"
          $content = "window.config = { CREDENTIALS_API_STATUS:'https://qa-waverify-api.doh.wa.gov', CREDENTIALS_API_QR:'https://qa-waverify-api.doh.wa.gov', CREDENTIALS_GA_DEPARTMENT: '', APPLICATION_INSIGHTS_INSTRUMENTATION_KEY: '5f0f63a8-9666-4e92-a726-e32cd532820f'};"
          echo $content | Set-Content $config_dest;
 
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: 'build'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs: 
        pathtoPublish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip

- stage: qa_deployment
  displayName: Deploy QA Solution
  dependsOn: [qa_build]
  jobs:
    - deployment: qa_deployment
      displayName: Deploy to QA Environment
      environment: QA
      strategy: 
        runOnce:
          deploy:
            steps:
            - task: DownloadBuildArtifacts@1
              displayName: 'Download Artifact'
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'drop'
                downloadPath: '$(System.ArtifactsDirectory)'
            - task: AzureRmWebAppDeployment@4
              displayName: 'Azure App Service Deployment'
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'sc-waverify-adopipelines'
                appType: 'webApp'
                WebAppName: 'app-waverify-ui-qa'
                packageForLinux: '$(System.ArtifactsDirectory)/**/*.zip'

- stage: prod_build
  displayName: Build Production Solution
  dependsOn: [qa_deployment]
  jobs:  
  - job: Build
    displayName: Build and Publish Solution
    steps:
    - task: NodeTool@0
      displayName: 'Install node.js'
      inputs:
        versionSpec: '10.x'

    - script: 
        npm install
      displayName: 'npm install'
      workingDirectory: $(directory)
 
    - script: 
        set "REACT_APP_STAGE=$(stage)" && npm run build
      displayName: 'npm build'
      workingDirectory: $(directory)

    - task: CopyFiles@2
      displayName: 'Copy web.config to build folder'
      inputs:
        SourceFolder: '$(directory)/'
        Contents: 'web.config'
        TargetFolder: '$(directory)/build'

    - task: PowerShell@2
      displayName: 'Replace config.js values for Production'
      inputs:
        targetType: 'inline'
        script: |
          $config_dest = "$(directory)\build\config.js"
          $content = "window.config = { CREDENTIALS_API_STATUS:'https://waverify-api.doh.wa.gov', CREDENTIALS_API_QR:'https://waverify-api.doh.wa.gov', CREDENTIALS_GA_DEPARTMENT: 'G-HHSVC4W7NS', APPLICATION_INSIGHTS_INSTRUMENTATION_KEY: '08742132-99f2-42b1-ae94-fa910e65a121'};"
          echo $content | Set-Content $config_dest;
 
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: 'build'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs: 
        pathtoPublish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip

- stage: prod_deployment
  displayName: Deploy Production Solution
  dependsOn: [prod_build]
  jobs:
    - deployment: prod_deployment
      displayName: Deploy to Production Environment
      environment: Production
      strategy: 
        runOnce:
          deploy:
            steps:
            - task: DownloadBuildArtifacts@1
              displayName: 'Download Artifact'
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'drop'
                downloadPath: '$(System.ArtifactsDirectory)'
            - task: AzureRmWebAppDeployment@4
              displayName: 'Azure App Service Deployment'
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'sc-waverify-adopipelines'
                appType: 'webApp'
                WebAppName: 'app-waverify-ui-prod'
                deployToSlotOrASE: true
                ResourceGroupName: 'rg-waverify-prod'
                SlotName: 'staging'
                packageForLinux: '$(System.ArtifactsDirectory)/**/*.zip'